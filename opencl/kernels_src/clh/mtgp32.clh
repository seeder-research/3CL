#define MTGP32_MEXP 11213
#define MTGP32_N 351
#define MTGP32_FLOOR_2P 256
#define MTGP32_CEIL_2P 512
#define MTGP32_TN MTGP32_FLOOR_2P
#define MTGP32_LS (MTGP32_TN * 3)
#define MTGP32_TS 16

/* =========================
   declarations
   ========================= */
struct MTGP32_T {
    __local uint * status;
    __constant uint * param_tbl;
    __constant uint * temper_tbl;
    __constant uint * single_temper_tbl;
    uint pos;
    uint sh1;
    uint sh2;
};
typedef struct MTGP32_T mtgp32_t;

__constant uint mtgp32_mask = 0xfff80000;

/* ================================ */
/* mtgp32 sample device function    */
/* ================================ */
/**
 * The function of the recursion formula calculation.
 *
 * @param[in] mtgp mtgp32 structure
 * @param[in] X1 the farthest part of state array.
 * @param[in] X2 the second farthest part of state array.
 * @param[in] Y a part of state array.
 * @return output
 */
static inline uint para_rec(mtgp32_t * mtgp, uint X1, uint X2, uint Y)
{
    uint X = (X1 & mtgp32_mask) ^ X2;
    uint MAT;

    X ^= X << mtgp->sh1;
    Y = X ^ (Y >> mtgp->sh2);
    MAT = mtgp->param_tbl[Y & 0x0f];
    return Y ^ MAT;
}

/**
 * The tempering and converting function.
 * By using the preset-ted table, converting to IEEE format
 * and tempering are done simultaneously.
 *
 * @param[in] mtgp mtgp32 structure
 * @param[in] V the output value should be tempered.
 * @param[in] T the tempering helper value.
 * @return the tempered and converted value.
 */
static inline uint temper_single(mtgp32_t * mtgp, uint V, uint T)
{
    uint MAT;
    uint r;

    T ^= T >> 16;
    T ^= T >> 8;
    MAT = mtgp->single_temper_tbl[T & 0x0f];
    r = (V >> 9) ^ MAT;
    return r;
}

/**
 * Read the internal state vector from kernel I/O data, and
 * put them into local memory.
 *
 * @param[out] status shared memory.
 * @param[in] d_status kernel I/O data
 * @param[in] gid block id
 * @param[in] lid thread id
 */
static inline void status_read(__local uint  * status,
			       __global uint * d_status,
			       int gid,
			       int lid)
{
    status[MTGP32_LS - MTGP32_N + lid]
	= d_status[gid * MTGP32_N + lid];
    if (lid < MTGP32_N - MTGP32_TN) {
	status[MTGP32_LS - MTGP32_N + MTGP32_TN + lid]
	    = d_status[gid * MTGP32_N + MTGP32_TN + lid];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
}

/**
 * Read the internal state vector from local memory, and
 * write them into kernel I/O data.
 *
 * @param[out] d_status kernel I/O data
 * @param[in] status shared memory.
 * @param[in] gid block id
 * @param[in] lid thread id
 */
static inline void status_write(__global uint * d_status,
				__local uint * status,
				int gid,
				int lid)
{
    d_status[gid * MTGP32_N + lid]
	= status[MTGP32_LS - MTGP32_N + lid];
    if (lid < MTGP32_N - MTGP32_TN) {
	d_status[gid * MTGP32_N + MTGP32_TN + lid]
	    = status[4 * MTGP32_TN - MTGP32_N + lid];
    }
    barrier(CLK_GLOBAL_MEM_FENCE);
}

/**
 * This function initializes the internal state array with a 32-bit
 * integer seed.
 * @param[in] mtgp mtgp32 structure
 * @param[in] seed a 32-bit integer used as the seed.
 */
static inline void mtgp32_init_state(mtgp32_t * mtgp, uint seed)
{
    int i;
    uint hidden_seed;
    uint tmp;
    __local uint * status = mtgp->status;
    const int lid = get_local_id(0);
    const int local_size = get_local_size(0);

    hidden_seed = mtgp->param_tbl[4] ^ (mtgp->param_tbl[8] << 16);
    tmp = hidden_seed;
    tmp += tmp >> 16;
    tmp += tmp >> 8;
    tmp &= 0xff;
    tmp |= tmp << 8;
    tmp |= tmp << 16;

    status[lid] = tmp;
    if ((local_size < MTGP32_N) && (lid < MTGP32_N - MTGP32_TN)) {
	status[MTGP32_TN + lid] = tmp;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_fence(CLK_LOCAL_MEM_FENCE);

    if (lid == 0) {
	status[0] = seed;
	for (i = 1; i < MTGP32_N; i++) {
	    status[i] = hidden_seed ^ (i + 1812433253U * (status[i - 1]
							  ^ (status[i - 1] >> 30)));
	    hidden_seed = tmp;
	}
    }
}

static float normcdfinv_(float u) {
	float	v;
	float	p;
	float	q;
	float	ushift;

	ushift = u - 0.5f;

	v = copysign(ushift, 0.0f);
	
	if (v < 0.499433f) {
		v = rsqrt((-u*u) + u);
		v *= 0.5f;
		p = 0.001732781974270904f;
		p = p * v + 0.1788417306083325f;
		p = p * v + 2.804338363421083f;
		p = p * v + 9.35716893191325f;
		p = p * v + 5.283080058166861f;
		p = p * v + 0.07885390444279965f;
		p *= ushift;
		q = 0.0001796248328874524f;
		q = q * v + 0.02398533988976253f;
		q = q * v + 0.4893072798067982f;
		q = q * v + 2.406460595830034f;
		q = q * v + 3.142947488363618f;
	} else {
		if (ushift > 0.0f) {
			u = 1.0f - u;
		}
		v = log2(u+u);
		v *= -0.6931471805599453f;
		if (v < 22.0f) {
			p = 0.000382438382914666f;
			p = p * v + 0.03679041341785685f;
			p = p * v + 0.5242351532484291f;
			p = p * v + 1.21642047402659f;
			q = 9.14019972725528e-6f;
			q = q * v + 0.003523083799369908f;
			q = q * v + 0.126802543865968f;
			q = q * v + 0.8502031783957995f;
		} else {
			p = 0.00001016962895771568f;
			p = p * v + 0.003330096951634844f;
			p = p * v + 0.1540146885433827f;
			p = p * v + 1.045480394868638f;
			q = 1.303450553973082e-7f;
			q = q * v + 0.0001728926914526662f;
			q = q * v + 0.02031866871146244f;
			q = q * v + 0.3977137974626933f;
		}
		p *= copysign(v, ushift);
	}
	q = q * v + 1.0f;
	v = 1.0f / q;
	return p * v;
}
